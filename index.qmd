---
title: 'Lookup: Posit Connect People'
date: "last-modified"
date-format: D MMM YYYY HH:mm
format: html
execute:
  echo: false
resource_files:
 - R/api.R
---

```{r}
#| label: check-env-vars
#| results: "asis"
required_env_vars <- c("CONNECT_SERVER", "CONNECT_API_KEY")
if (any(Sys.getenv(required_env_vars) == "")) {
  cat("One of the following environment variables was not set, so exiting \n\n")
  cat(paste("*", required_env_vars, collapse = "\n"), "\n\n")
  knitr::knit_exit() 
}
```

```{r}
#| label: prepare-workspace
#| include: false
list.files("R", "\\.R$", , TRUE) |> purrr::walk(source)
server_name <- Sys.getenv("CONNECT_SERVER")
people_path <- glue::glue("{server_name}connect/#/people/")
dat <- get_all_users_groups() |> 
  tidyr::replace_na(list(username = "[No user]", group = "[No group]"))
```

## Purpose

A quick lookup of [users and groups](`r people_path`) on the server `r server_name`. Find [the source on GitHub](https://github.com/The-Strategy-Unit/posit-connect-people/).

## By user

```{r}
#| label: by-user
dat |>
  dplyr::select(username, group) |> 
  dplyr::arrange(tolower(username), tolower(group)) |> 
  reactable::reactable(
    groupBy = "username",
    columns = list(
      username = reactable::colDef(
        filterable = TRUE,
        filterInput = function(values, name) {
          htmltools::tags$select(
            # Set to undefined to clear the filter
            onchange = sprintf("Reactable.setFilter('cars-select', '%s', event.target.value || undefined)", name),
            # "All" has an empty value to clear the filter, and is the default option
            htmltools::tags$option(value = "", "All"),
            lapply(unique(values), htmltools::tags$option),
            "aria-label" = sprintf("Filter %s", name),
            style = "width: 100%; height: 28px;"
          )
        }
      )
    )
  )
```

## By group

```{r}
#| label: by-group
dat |>
  dplyr::select(group, username) |>
  dplyr::arrange(tolower(group), tolower(username)) |> 
  reactable::reactable(
    groupBy = "group",
    columns = list(
      group = reactable::colDef(
        filterable = TRUE,
        filterInput = function(values, name) {
          htmltools::tags$select(
            # Set to undefined to clear the filter
            onchange = sprintf("Reactable.setFilter('cars-select', '%s', event.target.value || undefined)", name),
            # "All" has an empty value to clear the filter, and is the default option
            htmltools::tags$option(value = "", "All"),
            lapply(unique(values), htmltools::tags$option),
            "aria-label" = sprintf("Filter %s", name),
            style = "width: 100%; height: 28px;"
          )
        }
      )
    )
  )
```

## All data

```{r}
#| label: all-data
htmltools::browsable(
  htmltools::tagList(
    htmltools::tags$button(
      "Download CSV",
      onclick = "Reactable.downloadDataCSV('data-table', 'posit-connect-people.csv')"
    ),
    reactable::reactable(
      dat |> dplyr::arrange(tolower(username), tolower(group)),
      filterable = TRUE,
      elementId = "data-table",
    )
  )
)
```
